{"ast":null,"code":"var _jsxFileName = \"/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js\";\nimport React, { Component } from \"react\";\nimport uniqid from \"uniqid\";\nimport \"./tasks.css\";\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from \"./components/TaskList/TaskList\";\nimport TaskEditor from \"./components/TaskEditor/TaskEditor\";\nimport Filter from \"./components/TaskList/Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SecondApp extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      tasks: [],\n      filter: \"\"\n    };\n    this.changeFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n    this.getVisibleTasks = () => {\n      const {\n        tasks,\n        filter\n      } = this.state;\n      return tasks.filter(task => task.text.toLocaleLowerCase().includes(filter.toLowerCase()));\n    };\n    this.addTask = text => {\n      // const task = createTask();\n\n      const task = {\n        id: uniqid(),\n        text: text,\n        completed: false\n      };\n      this.setState(prevState => {\n        // ! Создаем новый массив,\n        // ! Распыляем предыдущий и добавляем новый елемент\n        return {\n          tasks: [...prevState.tasks, task]\n        };\n      });\n    };\n    this.removeTask = taskId => {\n      this.setState(prevState => {\n        return {\n          // ! Проверяем каждый елемент, когда совпадает\n          // ! id елемента при клике с id елмента с массива\n          // ! удаляем его с коллекции\n          // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n          tasks: prevState.tasks.filter(_ref => {\n            let {\n              id\n            } = _ref;\n            return id !== taskId;\n          })\n          // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n        };\n      });\n    };\n    this.updateCompleted = taskId => {\n      // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map(task => task.id === taskId ? {\n          ...task,\n          completed: !task.completed\n        } : task)\n      }));\n    };\n  }\n  // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n  componentDidMount() {\n    console.log(\"Tasks componentDidMount\");\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps: \", prevProps);\n    console.log(\"prevState: \", prevState);\n  }\n  componentWillUnmount() {}\n  render() {\n    const {\n      filter\n    } = this.state;\n\n    // ! Рисуем только те таски, которые прошли проверку в функции\n    // ! А в state будут оставаться все теже таски\n\n    const visibleTasks = this.getVisibleTasks();\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskEditor, {\n        onAddTask: this.addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), visibleTasks.length > 1 && /*#__PURE__*/_jsxDEV(Filter, {\n        value: filter,\n        onChangeFilter: this.changeFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), visibleTasks.length > 0 && /*#__PURE__*/_jsxDEV(TaskList\n      // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n      // но технически все записанные таски остаются в стэйте\n      , {\n        tasks: visibleTasks,\n        onRemoveTask: this.removeTask,\n        onUpdateTask: this.updateCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default SecondApp;","map":{"version":3,"names":["React","Component","uniqid","TaskList","TaskEditor","Filter","jsxDEV","_jsxDEV","SecondApp","constructor","arguments","state","tasks","filter","changeFilter","setState","getVisibleTasks","task","text","toLocaleLowerCase","includes","toLowerCase","addTask","id","completed","prevState","removeTask","taskId","_ref","updateCompleted","map","componentDidMount","console","log","componentDidUpdate","prevProps","componentWillUnmount","render","visibleTasks","children","onAddTask","fileName","_jsxFileName","lineNumber","columnNumber","length","value","onChangeFilter","onRemoveTask","onUpdateTask"],"sources":["/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport uniqid from \"uniqid\";\nimport \"./tasks.css\";\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from \"./components/TaskList/TaskList\";\nimport TaskEditor from \"./components/TaskEditor/TaskEditor\";\nimport Filter from \"./components/TaskList/Filter\";\n\nclass SecondApp extends Component {\n  state = {\n    tasks: [],\n    filter: \"\",\n  };\n\n  // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n  componentDidMount() {\n    console.log(\"Tasks componentDidMount\");\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps: \", prevProps);\n    console.log(\"prevState: \", prevState);\n  }\n\n  componentWillUnmount() {}\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n\n  getVisibleTasks = () => {\n    const { tasks, filter } = this.state;\n    return tasks.filter((task) =>\n      task.text.toLocaleLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  addTask = (text) => {\n    // const task = createTask();\n\n    const task = {\n      id: uniqid(),\n      text: text,\n      completed: false,\n    };\n\n    this.setState((prevState) => {\n      // ! Создаем новый массив,\n      // ! Распыляем предыдущий и добавляем новый елемент\n      return {\n        tasks: [...prevState.tasks, task],\n      };\n    });\n  };\n\n  removeTask = (taskId) => {\n    this.setState((prevState) => {\n      return {\n        // ! Проверяем каждый елемент, когда совпадает\n        // ! id елемента при клике с id елмента с массива\n        // ! удаляем его с коллекции\n        // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n        tasks: prevState.tasks.filter(({ id }) => id !== taskId),\n        // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n      };\n    });\n  };\n\n  updateCompleted = (taskId) => {\n    // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task\n      ),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    // ! Рисуем только те таски, которые прошли проверку в функции\n    // ! А в state будут оставаться все теже таски\n\n    const visibleTasks = this.getVisibleTasks();\n\n    return (\n      <section>\n        <TaskEditor onAddTask={this.addTask} />\n\n        {visibleTasks.length > 1 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n\n        {/* Рендер по условию */}\n\n        {visibleTasks.length > 0 && (\n          <TaskList\n            // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n            // но технически все записанные таски остаются в стэйте\n            tasks={visibleTasks}\n            onRemoveTask={this.removeTask}\n            onUpdateTask={this.updateCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default SecondApp;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,aAAa;AACpB;AACA;AACA;AACA,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,MAAM,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,SAAS,SAASP,SAAS,CAAC;EAAAQ,YAAA;IAAA,SAAAC,SAAA;IAAA,KAChCC,KAAK,GAAG;MACNC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE;IACV,CAAC;IAAA,KAeDC,YAAY,GAAID,MAAM,IAAK;MACzB,IAAI,CAACE,QAAQ,CAAC;QAAEF;MAAO,CAAC,CAAC;IAC3B,CAAC;IAAA,KAEDG,eAAe,GAAG,MAAM;MACtB,MAAM;QAAEJ,KAAK;QAAEC;MAAO,CAAC,GAAG,IAAI,CAACF,KAAK;MACpC,OAAOC,KAAK,CAACC,MAAM,CAAEI,IAAI,IACvBA,IAAI,CAACC,IAAI,CAACC,iBAAiB,EAAE,CAACC,QAAQ,CAACP,MAAM,CAACQ,WAAW,EAAE,CAAC,CAC7D;IACH,CAAC;IAAA,KAEDC,OAAO,GAAIJ,IAAI,IAAK;MAClB;;MAEA,MAAMD,IAAI,GAAG;QACXM,EAAE,EAAErB,MAAM,EAAE;QACZgB,IAAI,EAAEA,IAAI;QACVM,SAAS,EAAE;MACb,CAAC;MAED,IAAI,CAACT,QAAQ,CAAEU,SAAS,IAAK;QAC3B;QACA;QACA,OAAO;UACLb,KAAK,EAAE,CAAC,GAAGa,SAAS,CAACb,KAAK,EAAEK,IAAI;QAClC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDS,UAAU,GAAIC,MAAM,IAAK;MACvB,IAAI,CAACZ,QAAQ,CAAEU,SAAS,IAAK;QAC3B,OAAO;UACL;UACA;UACA;UACA;UACAb,KAAK,EAAEa,SAAS,CAACb,KAAK,CAACC,MAAM,CAACe,IAAA;YAAA,IAAC;cAAEL;YAAG,CAAC,GAAAK,IAAA;YAAA,OAAKL,EAAE,KAAKI,MAAM;UAAA;UACvD;QACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDE,eAAe,GAAIF,MAAM,IAAK;MAC5B;MACA,IAAI,CAACZ,QAAQ,CAAEU,SAAS,KAAM;QAC5Bb,KAAK,EAAEa,SAAS,CAACb,KAAK,CAACkB,GAAG,CAAEb,IAAI,IAC9BA,IAAI,CAACM,EAAE,KAAKI,MAAM,GAAG;UAAE,GAAGV,IAAI;UAAEO,SAAS,EAAE,CAACP,IAAI,CAACO;QAAU,CAAC,GAAGP,IAAI;MAEvE,CAAC,CAAC,CAAC;IACL,CAAC;EAAA;EA9DD;;EAEAc,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC;EAEAC,kBAAkBA,CAACC,SAAS,EAAEV,SAAS,EAAE;IACvCO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEE,SAAS,CAAC;IACrCH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAER,SAAS,CAAC;EACvC;EAEAW,oBAAoBA,CAAA,EAAG,CAAC;EAqDxBC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAExB;IAAO,CAAC,GAAG,IAAI,CAACF,KAAK;;IAE7B;IACA;;IAEA,MAAM2B,YAAY,GAAG,IAAI,CAACtB,eAAe,EAAE;IAE3C,oBACET,OAAA;MAAAgC,QAAA,gBACEhC,OAAA,CAACH,UAAU;QAACoC,SAAS,EAAE,IAAI,CAAClB;MAAQ;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EAEtCN,YAAY,CAACO,MAAM,GAAG,CAAC,iBACtBtC,OAAA,CAACF,MAAM;QAACyC,KAAK,EAAEjC,MAAO;QAACkC,cAAc,EAAE,IAAI,CAACjC;MAAa;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1D,EAIAN,YAAY,CAACO,MAAM,GAAG,CAAC,iBACtBtC,OAAA,CAACJ;MACC;MACA;MAAA;QACAS,KAAK,EAAE0B,YAAa;QACpBU,YAAY,EAAE,IAAI,CAACtB,UAAW;QAC9BuB,YAAY,EAAE,IAAI,CAACpB;MAAgB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEtC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACO;EAEd;AACF;AAEA,eAAepC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}