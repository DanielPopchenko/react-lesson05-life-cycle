{"ast":null,"code":"var _jsxFileName = \"/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport uniqid from 'uniqid';\nimport './tasks.css';\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from './components/TaskList/TaskList';\nimport TaskEditor from './components/TaskEditor/TaskEditor';\nimport Filter from './components/TaskList/Filter';\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SecondApp() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    console.log('Tasks didMount Effect');\n    const persistedTasks = localStorage.getItem('tasks');\n    if (persistedTasks) {\n      setTasks(JSON.parse(persistedTasks));\n    }\n  }, []);\n  useEffect(() => {\n    console.log('Сетим айтемы в локалсторэдж!');\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const changeFilter = filter => {\n    setFilter(filter);\n  };\n  const getVisibleTasks = () => {\n    return tasks.filter(task => task.text.toLocaleLowerCase().includes(filter.toLowerCase()));\n  };\n  const addTask = text => {\n    // const task = createTask();\n\n    const task = {\n      id: uniqid(),\n      text: text,\n      completed: false\n    };\n    setTasks(prev => [...prev, task]);\n  };\n  const removeTask = taskId => {\n    setTasks(prev => prev.tasks.filter(_ref => {\n      let {\n        id\n      } = _ref;\n      return id !== taskId;\n    }));\n  };\n  const updateCompleted = taskId => {\n    // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n\n    setTasks(prev => console.log('prev', prev));\n  };\n  const visibleTasks = getVisibleTasks();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(TaskEditor, {\n      onAddTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), visibleTasks.length > 0 && /*#__PURE__*/_jsxDEV(TaskList\n    // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n    // но технически все записанные таски остаются в стэйте\n    , {\n      tasks: visibleTasks,\n      onRemoveTask: removeTask,\n      onUpdateTask: updateCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n// class OldSecondApp extends Component {\n//   state = {\n//     tasks: [],\n//     filter: '',\n//   };\n\n//   // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n//   componentDidMount() {\n//     console.log('Tasks componentDidMount');\n\n//     // ! делаем это для проверки того есть ли у нас таски в локалсторедже\n//     const persistedTasks = localStorage.getItem('tasks');\n\n//     // ! Сохранение (персист) в localStorage\n//     if (persistedTasks) {\n//       this.setState({\n//         // ! результат JSON.parse() - массив объектов\n//         tasks: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n\n//   // ! Передается предыдущие пропы и стэйт до обновдения\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('tasks componentDidUpdate');\n//     if (prevState.tasks !== this.state.tasks) {\n//       console.log('нужно в лс');\n\n//       localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n//     }\n//   }\n\n//   changeFilter = (filter) => {\n//     this.setState({ filter });\n//   };\n\n//   getVisibleTasks = () => {\n//     const { tasks, filter } = this.state;\n//     return tasks.filter((task) =>\n//       task.text.toLocaleLowerCase().includes(filter.toLowerCase()),\n//     );\n//   };\n\n//   addTask = (text) => {\n//     // const task = createTask();\n\n//     const task = {\n//       id: uniqid(),\n//       text: text,\n//       completed: false,\n//     };\n\n//     this.setState((prevState) => {\n//       // ! Создаем новый массив,\n//       // ! Распыляем предыдущий и добавляем новый елемент\n//       return {\n//         tasks: [...prevState.tasks, task],\n//       };\n//     });\n//   };\n\n//   removeTask = (taskId) => {\n//     this.setState((prevState) => {\n//       return {\n//         // ! Проверяем каждый елемент, когда совпадает\n//         // ! id елемента при клике с id елмента с массива\n//         // ! удаляем его с коллекции\n//         // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n//         tasks: prevState.tasks.filter(({ id }) => id !== taskId),\n//         // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n//       };\n//     });\n//   };\n\n//   updateCompleted = (taskId) => {\n//     // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n//     this.setState((prevState) => ({\n//       tasks: prevState.tasks.map((task) =>\n//         task.id === taskId ? { ...task, completed: !task.completed } : task,\n//       ),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n\n//     // ! Рисуем только те таски, которые прошли проверку в функции\n//     // ! А в state будут оставаться все теже таски\n\n//     const visibleTasks = this.getVisibleTasks();\n\n//     return (\n//       <section>\n//         <TaskEditor onAddTask={this.addTask} />\n\n//         {visibleTasks.length > 1 && (\n//           <Filter value={filter} onChangeFilter={this.changeFilter} />\n//         )}\n\n//         {/* Рендер по условию */}\n\n//         {visibleTasks.length > 0 && (\n//           <TaskList\n//             // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n//             // но технически все записанные таски остаются в стэйте\n//             tasks={visibleTasks}\n//             onRemoveTask={this.removeTask}\n//             onUpdateTask={this.updateCompleted}\n//           />\n//         )}\n//       </section>\n//     );\n//   }\n// }\n_s(SecondApp, \"JdWgp3KVsfc0o8eJ0qH0vYGM5cI=\");\n_c = SecondApp;\nvar _c;\n$RefreshReg$(_c, \"SecondApp\");","map":{"version":3,"names":["useState","uniqid","TaskList","TaskEditor","Filter","findRenderedComponentWithType","useEffect","jsxDEV","_jsxDEV","SecondApp","_s","tasks","setTasks","filter","setFilter","console","log","persistedTasks","localStorage","getItem","JSON","parse","setItem","stringify","changeFilter","getVisibleTasks","task","text","toLocaleLowerCase","includes","toLowerCase","addTask","id","completed","prev","removeTask","taskId","_ref","updateCompleted","visibleTasks","children","onAddTask","fileName","_jsxFileName","lineNumber","columnNumber","length","onRemoveTask","onUpdateTask","_c","$RefreshReg$"],"sources":["/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js"],"sourcesContent":["import { useState } from 'react';\nimport uniqid from 'uniqid';\nimport './tasks.css';\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from './components/TaskList/TaskList';\nimport TaskEditor from './components/TaskEditor/TaskEditor';\nimport Filter from './components/TaskList/Filter';\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\nimport { useEffect } from 'react';\n\nexport default function SecondApp() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    console.log('Tasks didMount Effect');\n\n    const persistedTasks = localStorage.getItem('tasks');\n\n    if (persistedTasks) {\n      setTasks(JSON.parse(persistedTasks));\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('Сетим айтемы в локалсторэдж!');\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const changeFilter = (filter) => {\n    setFilter(filter);\n  };\n\n  const getVisibleTasks = () => {\n    return tasks.filter((task) =>\n      task.text.toLocaleLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const addTask = (text) => {\n    // const task = createTask();\n\n    const task = {\n      id: uniqid(),\n      text: text,\n      completed: false,\n    };\n\n    setTasks((prev) => [...prev, task]);\n  };\n\n  const removeTask = (taskId) => {\n    setTasks((prev) => prev.tasks.filter(({ id }) => id !== taskId));\n  };\n\n  const updateCompleted = (taskId) => {\n    // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n\n    setTasks((prev) => console.log('prev', prev));\n  };\n\n  const visibleTasks = getVisibleTasks();\n\n  return (\n    <section>\n      <TaskEditor onAddTask={addTask} />\n\n      {/* {visibleTasks.length > 1 && (\n        <Filter value={filter} onChangeFilter={this.changeFilter} />\n      )} */}\n\n      {/* Рендер по условию */}\n\n      {visibleTasks.length > 0 && (\n        <TaskList\n          // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n          // но технически все записанные таски остаются в стэйте\n          tasks={visibleTasks}\n          onRemoveTask={removeTask}\n          onUpdateTask={updateCompleted}\n        />\n      )}\n    </section>\n  );\n}\n\n// class OldSecondApp extends Component {\n//   state = {\n//     tasks: [],\n//     filter: '',\n//   };\n\n//   // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n//   componentDidMount() {\n//     console.log('Tasks componentDidMount');\n\n//     // ! делаем это для проверки того есть ли у нас таски в локалсторедже\n//     const persistedTasks = localStorage.getItem('tasks');\n\n//     // ! Сохранение (персист) в localStorage\n//     if (persistedTasks) {\n//       this.setState({\n//         // ! результат JSON.parse() - массив объектов\n//         tasks: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n\n//   // ! Передается предыдущие пропы и стэйт до обновдения\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('tasks componentDidUpdate');\n//     if (prevState.tasks !== this.state.tasks) {\n//       console.log('нужно в лс');\n\n//       localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n//     }\n//   }\n\n//   changeFilter = (filter) => {\n//     this.setState({ filter });\n//   };\n\n//   getVisibleTasks = () => {\n//     const { tasks, filter } = this.state;\n//     return tasks.filter((task) =>\n//       task.text.toLocaleLowerCase().includes(filter.toLowerCase()),\n//     );\n//   };\n\n//   addTask = (text) => {\n//     // const task = createTask();\n\n//     const task = {\n//       id: uniqid(),\n//       text: text,\n//       completed: false,\n//     };\n\n//     this.setState((prevState) => {\n//       // ! Создаем новый массив,\n//       // ! Распыляем предыдущий и добавляем новый елемент\n//       return {\n//         tasks: [...prevState.tasks, task],\n//       };\n//     });\n//   };\n\n//   removeTask = (taskId) => {\n//     this.setState((prevState) => {\n//       return {\n//         // ! Проверяем каждый елемент, когда совпадает\n//         // ! id елемента при клике с id елмента с массива\n//         // ! удаляем его с коллекции\n//         // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n//         tasks: prevState.tasks.filter(({ id }) => id !== taskId),\n//         // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n//       };\n//     });\n//   };\n\n//   updateCompleted = (taskId) => {\n//     // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n//     this.setState((prevState) => ({\n//       tasks: prevState.tasks.map((task) =>\n//         task.id === taskId ? { ...task, completed: !task.completed } : task,\n//       ),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n\n//     // ! Рисуем только те таски, которые прошли проверку в функции\n//     // ! А в state будут оставаться все теже таски\n\n//     const visibleTasks = this.getVisibleTasks();\n\n//     return (\n//       <section>\n//         <TaskEditor onAddTask={this.addTask} />\n\n//         {visibleTasks.length > 1 && (\n//           <Filter value={filter} onChangeFilter={this.changeFilter} />\n//         )}\n\n//         {/* Рендер по условию */}\n\n//         {visibleTasks.length > 0 && (\n//           <TaskList\n//             // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n//             // но технически все записанные таски остаются в стэйте\n//             tasks={visibleTasks}\n//             onRemoveTask={this.removeTask}\n//             onUpdateTask={this.updateCompleted}\n//           />\n//         )}\n//       </section>\n//     );\n//   }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}