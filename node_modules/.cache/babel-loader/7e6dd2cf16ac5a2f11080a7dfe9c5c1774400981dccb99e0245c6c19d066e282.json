{"ast":null,"code":"var _jsxFileName = \"/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport uniqid from 'uniqid';\nimport './tasks.css';\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from './components/TaskList/TaskList';\nimport TaskEditor from './components/TaskEditor/TaskEditor';\nimport Filter from './components/TaskList/Filter';\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SecondApp() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    console.log('Tasks didMount Effect');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(TaskEditor, {\n      onAddTask: this.addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), visibleTasks.length > 0 && /*#__PURE__*/_jsxDEV(TaskList\n    // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n    // но технически все записанные таски остаются в стэйте\n    , {\n      tasks: visibleTasks,\n      onRemoveTask: this.removeTask,\n      onUpdateTask: this.updateCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(SecondApp, \"2LmrK/3qIe6HjUb7tEYeGPC5fGE=\");\n_c = SecondApp;\nclass OldSecondApp extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      tasks: [],\n      filter: ''\n    };\n    this.changeFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n    this.getVisibleTasks = () => {\n      const {\n        tasks,\n        filter\n      } = this.state;\n      return tasks.filter(task => task.text.toLocaleLowerCase().includes(filter.toLowerCase()));\n    };\n    this.addTask = text => {\n      // const task = createTask();\n\n      const task = {\n        id: uniqid(),\n        text: text,\n        completed: false\n      };\n      this.setState(prevState => {\n        // ! Создаем новый массив,\n        // ! Распыляем предыдущий и добавляем новый елемент\n        return {\n          tasks: [...prevState.tasks, task]\n        };\n      });\n    };\n    this.removeTask = taskId => {\n      this.setState(prevState => {\n        return {\n          // ! Проверяем каждый елемент, когда совпадает\n          // ! id елемента при клике с id елмента с массива\n          // ! удаляем его с коллекции\n          // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n          tasks: prevState.tasks.filter(_ref => {\n            let {\n              id\n            } = _ref;\n            return id !== taskId;\n          })\n          // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n        };\n      });\n    };\n    this.updateCompleted = taskId => {\n      // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map(task => task.id === taskId ? {\n          ...task,\n          completed: !task.completed\n        } : task)\n      }));\n    };\n  }\n  // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n  componentDidMount() {\n    console.log('Tasks componentDidMount');\n\n    // ! делаем это для проверки того есть ли у нас таски в локалсторедже\n    const persistedTasks = localStorage.getItem('tasks');\n\n    // ! Сохранение (персист) в localStorage\n    if (persistedTasks) {\n      this.setState({\n        // ! результат JSON.parse() - массив объектов\n        tasks: JSON.parse(persistedTasks)\n      });\n    }\n  }\n\n  // ! Передается предыдущие пропы и стэйт до обновдения\n  componentDidUpdate(prevProps, prevState) {\n    console.log('tasks componentDidUpdate');\n    if (prevState.tasks !== this.state.tasks) {\n      console.log('нужно в лс');\n      localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n    }\n  }\n  componentWillUnmount() {}\n  render() {\n    const {\n      filter\n    } = this.state;\n\n    // ! Рисуем только те таски, которые прошли проверку в функции\n    // ! А в state будут оставаться все теже таски\n\n    const visibleTasks = this.getVisibleTasks();\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskEditor, {\n        onAddTask: this.addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), visibleTasks.length > 1 && /*#__PURE__*/_jsxDEV(Filter, {\n        value: filter,\n        onChangeFilter: this.changeFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), visibleTasks.length > 0 && /*#__PURE__*/_jsxDEV(TaskList\n      // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n      // но технически все записанные таски остаются в стэйте\n      , {\n        tasks: visibleTasks,\n        onRemoveTask: this.removeTask,\n        onUpdateTask: this.updateCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SecondApp\");","map":{"version":3,"names":["useState","uniqid","TaskList","TaskEditor","Filter","findRenderedComponentWithType","useEffect","jsxDEV","_jsxDEV","SecondApp","_s","tasks","setTasks","filter","setFilter","console","log","children","onAddTask","addTask","fileName","_jsxFileName","lineNumber","columnNumber","visibleTasks","length","onRemoveTask","removeTask","onUpdateTask","updateCompleted","_c","OldSecondApp","Component","constructor","arguments","state","changeFilter","setState","getVisibleTasks","task","text","toLocaleLowerCase","includes","toLowerCase","id","completed","prevState","taskId","_ref","map","componentDidMount","persistedTasks","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","setItem","stringify","componentWillUnmount","render","value","onChangeFilter","$RefreshReg$"],"sources":["/Users/danielpopchenko/Desktop/react-lesson05-life-cycle/src/SecondApp.js"],"sourcesContent":["import { useState } from 'react';\nimport uniqid from 'uniqid';\nimport './tasks.css';\n// import Counter from \"./components/Counter/Counter\";\n// import Toggle from \"./components/Toggle/Toggle\";\n// import Message from \"./components/Message/Message\";\nimport TaskList from './components/TaskList/TaskList';\nimport TaskEditor from './components/TaskEditor/TaskEditor';\nimport Filter from './components/TaskList/Filter';\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\nimport { useEffect } from 'react';\n\nexport default function SecondApp() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    console.log('Tasks didMount Effect');\n  }, []);\n\n  return (\n    <section>\n      <TaskEditor onAddTask={this.addTask} />\n\n      {/* {visibleTasks.length > 1 && (\n        <Filter value={filter} onChangeFilter={this.changeFilter} />\n      )} */}\n\n      {/* Рендер по условию */}\n\n      {visibleTasks.length > 0 && (\n        <TaskList\n          // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n          // но технически все записанные таски остаются в стэйте\n          tasks={visibleTasks}\n          onRemoveTask={this.removeTask}\n          onUpdateTask={this.updateCompleted}\n        />\n      )}\n    </section>\n  );\n}\n\nclass OldSecondApp extends Component {\n  state = {\n    tasks: [],\n    filter: '',\n  };\n\n  // ! Методы жизенного цикла пишутся после объявления state и статических методов класса\n\n  componentDidMount() {\n    console.log('Tasks componentDidMount');\n\n    // ! делаем это для проверки того есть ли у нас таски в локалсторедже\n    const persistedTasks = localStorage.getItem('tasks');\n\n    // ! Сохранение (персист) в localStorage\n    if (persistedTasks) {\n      this.setState({\n        // ! результат JSON.parse() - массив объектов\n        tasks: JSON.parse(persistedTasks),\n      });\n    }\n  }\n\n  // ! Передается предыдущие пропы и стэйт до обновдения\n  componentDidUpdate(prevProps, prevState) {\n    console.log('tasks componentDidUpdate');\n    if (prevState.tasks !== this.state.tasks) {\n      console.log('нужно в лс');\n\n      localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n    }\n  }\n\n  componentWillUnmount() {}\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n\n  getVisibleTasks = () => {\n    const { tasks, filter } = this.state;\n    return tasks.filter((task) =>\n      task.text.toLocaleLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  addTask = (text) => {\n    // const task = createTask();\n\n    const task = {\n      id: uniqid(),\n      text: text,\n      completed: false,\n    };\n\n    this.setState((prevState) => {\n      // ! Создаем новый массив,\n      // ! Распыляем предыдущий и добавляем новый елемент\n      return {\n        tasks: [...prevState.tasks, task],\n      };\n    });\n  };\n\n  removeTask = (taskId) => {\n    this.setState((prevState) => {\n      return {\n        // ! Проверяем каждый елемент, когда совпадает\n        // ! id елемента при клике с id елмента с массива\n        // ! удаляем его с коллекции\n        // !!! В нашем случае, когда id елемента при клике с id елмента с массива не совпадают, то оставляем\n        tasks: prevState.tasks.filter(({ id }) => id !== taskId),\n        // ! не передаем туда массив потому что filter сам создает массив из прошедших проверку елементов\n      };\n    });\n  };\n\n  updateCompleted = (taskId) => {\n    // !Чтобы неявно вернуть обьект, оборачиваем его в выражение ({....})\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task,\n      ),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    // ! Рисуем только те таски, которые прошли проверку в функции\n    // ! А в state будут оставаться все теже таски\n\n    const visibleTasks = this.getVisibleTasks();\n\n    return (\n      <section>\n        <TaskEditor onAddTask={this.addTask} />\n\n        {visibleTasks.length > 1 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n\n        {/* Рендер по условию */}\n\n        {visibleTasks.length > 0 && (\n          <TaskList\n            // Передаем сюда отфильтрованные видимые таски и отрисовываем их\n            // но технически все записанные таски остаются в стэйте\n            tasks={visibleTasks}\n            onRemoveTask={this.removeTask}\n            onUpdateTask={this.updateCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}